// Code generated by MockGen. DO NOT EDIT.
// Source: src/upstream/ethereum/client.go

// Package mock_ethereum is a generated GoMock package.
package mock_ethereum

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	ethclient "github.com/ethereum/go-ethereum/ethclient"
	gomock "github.com/golang/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// BalanceAt mocks base method.
func (m *MockIClient) BalanceAt(ctx context.Context, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceAt", ctx, account, blockNumber)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceAt indicates an expected call of BalanceAt.
func (mr *MockIClientMockRecorder) BalanceAt(ctx, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceAt", reflect.TypeOf((*MockIClient)(nil).BalanceAt), ctx, account, blockNumber)
}

// BlockNumber mocks base method.
func (m *MockIClient) BlockNumber(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumber", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber.
func (mr *MockIClientMockRecorder) BlockNumber(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockIClient)(nil).BlockNumber), ctx)
}

// CheckIfArchive mocks base method.
func (m *MockIClient) CheckIfArchive() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckIfArchive")
}

// CheckIfArchive indicates an expected call of CheckIfArchive.
func (mr *MockIClientMockRecorder) CheckIfArchive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfArchive", reflect.TypeOf((*MockIClient)(nil).CheckIfArchive))
}

// Dial mocks base method.
func (m *MockIClient) Dial() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial")
	ret0, _ := ret[0].(error)
	return ret0
}

// Dial indicates an expected call of Dial.
func (mr *MockIClientMockRecorder) Dial() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockIClient)(nil).Dial))
}

// EthClient mocks base method.
func (m *MockIClient) EthClient() *ethclient.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthClient")
	ret0, _ := ret[0].(*ethclient.Client)
	return ret0
}

// EthClient indicates an expected call of EthClient.
func (mr *MockIClientMockRecorder) EthClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthClient", reflect.TypeOf((*MockIClient)(nil).EthClient))
}

// EvaluatedHealthCheck mocks base method.
func (m *MockIClient) EvaluatedHealthCheck() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EvaluatedHealthCheck")
}

// EvaluatedHealthCheck indicates an expected call of EvaluatedHealthCheck.
func (mr *MockIClientMockRecorder) EvaluatedHealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluatedHealthCheck", reflect.TypeOf((*MockIClient)(nil).EvaluatedHealthCheck))
}

// GetMaxBlock mocks base method.
func (m *MockIClient) GetMaxBlock() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBlock")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxBlock indicates an expected call of GetMaxBlock.
func (mr *MockIClientMockRecorder) GetMaxBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBlock", reflect.TypeOf((*MockIClient)(nil).GetMaxBlock))
}

// HealthCheck mocks base method.
func (m *MockIClient) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockIClientMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockIClient)(nil).HealthCheck))
}

// Healthy mocks base method.
func (m *MockIClient) Healthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockIClientMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockIClient)(nil).Healthy))
}

// IsArchive mocks base method.
func (m *MockIClient) IsArchive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArchive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsArchive indicates an expected call of IsArchive.
func (mr *MockIClientMockRecorder) IsArchive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArchive", reflect.TypeOf((*MockIClient)(nil).IsArchive))
}

// SetHealth mocks base method.
func (m *MockIClient) SetHealth(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHealth", arg0)
}

// SetHealth indicates an expected call of SetHealth.
func (mr *MockIClientMockRecorder) SetHealth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHealth", reflect.TypeOf((*MockIClient)(nil).SetHealth), arg0)
}

// SyncProgress mocks base method.
func (m *MockIClient) SyncProgress(ctx context.Context) (*ethereum.SyncProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncProgress", ctx)
	ret0, _ := ret[0].(*ethereum.SyncProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncProgress indicates an expected call of SyncProgress.
func (mr *MockIClientMockRecorder) SyncProgress(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncProgress", reflect.TypeOf((*MockIClient)(nil).SyncProgress), ctx)
}
